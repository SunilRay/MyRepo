name: AI PR Review with Gemini
on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  ai-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Get PR diff
        id: get-diff
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}
          DIFF=$(git diff origin/${{ github.event.pull_request.base.ref }}...HEAD)
          # Truncate if too large (Gemini has 32K token limit)
          echo "$DIFF" | head -c 30000 > diff.txt
          
      - name: Get changed files
        id: changed-files
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}
          FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD)
          echo "$FILES" > files.txt
          
      - name: AI Code Review with Gemini
        id: ai-review
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          # Read files
          CHANGED_FILES=$(cat files.txt)
          DIFF_CONTENT=$(cat diff.txt)
          
          # Create the prompt
          PROMPT="You are an expert code reviewer. Review the following pull request changes and provide:

          1. 📋 Summary of changes
          2. 🐛 Potential issues or bugs
          3. 🔒 Security concerns
          4. ⚡ Performance considerations
          5. ✨ Code quality suggestions
          6. 📚 Best practices recommendations
          
          Be constructive and specific. Format your response in markdown with emojis.
          
          Changed files:
          ${CHANGED_FILES}
          
          Git diff:
          ${DIFF_CONTENT}"
          
          # Escape for JSON
          ESCAPED_PROMPT=$(echo "$PROMPT" | jq -Rs .)
          
          # Create payload
          cat > payload.json << EOF
          {
            "contents": [{
              "parts": [{
                "text": ${ESCAPED_PROMPT}
              }]
            }],
            "generationConfig": {
              "temperature": 0.3,
              "maxOutputTokens": 2048,
              "topP": 0.8,
              "topK": 10
            }
          }
          EOF
          
          # Call Gemini API
          RESPONSE=$(curl -s -w "\n%{http_code}" \
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${GEMINI_API_KEY}" \
            -H "Content-Type: application/json" \
            -d @payload.json)
          
          # Split response and status code
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          
          echo "HTTP Status: $HTTP_CODE"
          
          # Check if request was successful
          if [ "$HTTP_CODE" -ne 200 ]; then
            echo "❌ API call failed with status $HTTP_CODE"
            echo "Error response: $BODY"
            REVIEW="⚠️ Failed to generate review. API returned status $HTTP_CODE.
            
            Please check:
            - GEMINI_API_KEY secret is set correctly
            - API key has proper permissions
            - Gemini API quota is not exceeded"
          else
            # Extract the review content from Gemini response
            REVIEW=$(echo "$BODY" | jq -r '.candidates[0].content.parts[0].text // "Failed to extract review from response"')
            
            # Check if there was a safety filter or other issue
            if echo "$BODY" | jq -e '.candidates[0].finishReason' | grep -q "SAFETY"; then
              SAFETY_REASON=$(echo "$BODY" | jq -r '.candidates[0].safetyRatings')
              REVIEW="⚠️ Review blocked by safety filters.
              
              This might happen if the code diff contains sensitive patterns.
              Safety ratings: ${SAFETY_REASON}"
            fi
          fi
          
          # Save review to file
          echo "$REVIEW" > review.md
          
          # Debug: show first 500 chars of review
          echo "Review preview:"
          head -c 500 review.md
          
      - name: Post Review Comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const review = fs.readFileSync('review.md', 'utf8');
            
            const comment = `## 🤖 AI Code Review
            
            ${review}
            
            ---
            *This review was automatically generated by Google Gemini 2.5 Flash*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });