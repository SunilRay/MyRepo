name: AI PR Review

# When this workflow runs
on:
  pull_request:
    types: [opened, synchronize]  # Runs when PR is created or updated

# Permissions needed for the workflow
permissions:
  contents: read          # Read repository content
  pull-requests: write    # Write comments on PRs

jobs:
  ai-review:
    runs-on: ubuntu-latest  # Uses Ubuntu server
    
    steps:
      # Step 1: Checkout the code from the PR
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full git history

      # Step 2: Get the diff (changes) between base branch and PR
      - name: Get PR diff
        id: diff
        run: |
          # Fetch the base branch
          git fetch origin ${{ github.event.pull_request.base.ref }}
          
          # Get the difference between base and PR branch
          DIFF=$(git diff origin/${{ github.event.pull_request.base.ref }}...HEAD)
          
          # Limit size to avoid API limits (adjust as needed)
          DIFF_TRUNCATED=$(echo "$DIFF" | head -c 40000)
          
          # Save to output for next step
          echo "diff<<EOF" >> $GITHUB_OUTPUT
          echo "$DIFF_TRUNCATED" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Step 3: Send to OpenAI for review
      - name: AI Review with OpenAI
        id: ai_review
        run: |
          # Call OpenAI API
          RESPONSE=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -d '{
              "model": "gpt-4o",
              "messages": [
                {
                  "role": "system",
                  "content": "You are an expert code reviewer. Provide constructive, actionable feedback on pull requests."
                },
                {
                  "role": "user",
                  "content": "Review this pull request:\n\n**PR Title:** ${{ github.event.pull_request.title }}\n\n**Description:**\n${{ github.event.pull_request.body }}\n\n**Code Changes:**\n```diff\n${{ steps.diff.outputs.diff }}\n```\n\nProvide feedback on:\n1. **Code Quality**: Best practices, readability, maintainability\n2. **Potential Bugs**: Logic errors, edge cases\n3. **Security**: Vulnerabilities or security concerns\n4. **Performance**: Optimization opportunities\n5. **Suggestions**: Specific improvements\n\nFormat your response in markdown with clear sections."
                }
              ],
              "temperature": 0.3,
              "max_tokens": 2000
            }')
          
          # Extract the review text from JSON response
          REVIEW=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')
          
          # Handle potential errors
          if [ "$REVIEW" = "null" ] || [ -z "$REVIEW" ]; then
            REVIEW="‚ö†Ô∏è Failed to generate review. API response: $RESPONSE"
          fi
          
          # Save to output
          echo "review<<EOF" >> $GITHUB_OUTPUT
          echo "$REVIEW" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Step 4: Post the review as a comment on the PR
      - name: Post review comment
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ü§ñ AI Code Review\n\n${{ steps.ai_review.outputs.review }}\n\n---\n*Automated review by GPT-4 ‚Ä¢ Use your best judgment when applying suggestions*`
            })