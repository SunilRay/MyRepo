name: AI Review with Gemini

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  ai-review:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get PR diff
        id: diff
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}
          DIFF=$(git diff origin/${{ github.event.pull_request.base.ref }}...HEAD)
          DIFF_TRUNCATED=$(echo "$DIFF" | head -c 30000)
          {
            echo "diff<<EOF"
            echo "$DIFF_TRUNCATED"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Get PR info
        id: pr_info
        run: |
          {
            echo "title<<EOF"
            echo "${{ github.event.pull_request.title }}"
            echo "EOF"
          } >> $GITHUB_OUTPUT
          {
            echo "body<<EOF"
            echo "${{ github.event.pull_request.body }}"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Call Gemini API
        id: ai_review
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          PR_TITLE: ${{ steps.pr_info.outputs.title }}
          PR_BODY: ${{ steps.pr_info.outputs.body }}
          PR_DIFF: ${{ steps.diff.outputs.diff }}
        run: |
          # Create JSON payload for Gemini
          PAYLOAD=$(jq -n \
            --arg title "$PR_TITLE" \
            --arg body "$PR_BODY" \
            --arg diff "$PR_DIFF" \
            '{
              "contents": [{
                "parts": [{
                  "text": ("You are an expert code reviewer. Review this pull request and provide constructive, actionable feedback.\n\n**PR Title:** " + $title + "\n\n**Description:**\n" + $body + "\n\n**Code Changes:**\n```diff\n" + $diff + "\n```\n\nProvide feedback on:\n1. Code Quality\n2. Potential Bugs\n3. Security Issues\n4. Performance\n5. Best Practice Suggestions\n\nFormat your response in markdown.")
                }]
              }],
              "generationConfig": {
                "temperature": 0.3,
                "maxOutputTokens": 2000
              }
            }')
          
          # Call Gemini API
          RESPONSE=$(curl -s "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=$GEMINI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD")
          
          echo "API Response: $RESPONSE"
          
          # Extract review
          REVIEW=$(echo "$RESPONSE" | jq -r '.candidates[0].content.parts[0].text // "Failed to get review"')
          
          # Check for API errors
          ERROR=$(echo "$RESPONSE" | jq -r '.error.message // empty')
          if [ ! -z "$ERROR" ]; then
            REVIEW="‚ö†Ô∏è **Gemini API Error:** $ERROR"
          fi
          
          {
            echo "review<<EOF"
            echo "$REVIEW"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Post review comment
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ü§ñ AI Code Review (Gemini)\n\n${{ steps.ai_review.outputs.review }}\n\n---\n*Automated review by Google Gemini 1.5 Flash ‚Ä¢ Use your best judgment*`
            })